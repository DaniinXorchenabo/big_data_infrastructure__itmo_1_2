name: Continuous Delivery

on:
  workflow_dispatch:    # Позволяет запускать вручную
    inputs:
      deploy:
        description: 'Choose deploy environment'
        required: true
        default: 'staging'
  schedule:
    - cron: '0 0 1 * *'   # По расписанию
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed         # После завершения CI pipeline

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Set up Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose
  
    - name: Set environ variables
      id: set_env_for_docker_run
      run: |
        echo "VAULT_SECRETS_PATH=test" >> $GITHUB_OUTPUT
        echo "VAULT_SECRETS_NAME=unittests" >> $GITHUB_OUTPUT

    - name: Copy .env file
      run: |
          cp ./env/example.env ./env/.env
          echo "VAULT_SECRETS_PATH=${{ steps.set_env_for_docker_run.outputs.VAULT_SECRETS_PATH }}" >>  ./env/.env
          echo "VAULT_SECRETS_NAME=${{ steps.set_env_for_docker_run.outputs.VAULT_SECRETS_NAME }}" >>  ./env/.env

          echo "CONTAINER_PREFIX=unittests" >>  ./env/.env
          echo "DB_HOST=hbase-rest" >>  ./env/.env

          cp ./env/.env ./env/unittests.env

    - name: Pull vault image from Docker Compose
      run: |
        sudo docker-compose -f ./docker/docker-compose.yml  --env-file ./env/unittests.env  pull vault

    - name: Get Vault tokens
      id: vault_init
      run: |
        sudo docker-compose -f ./docker/docker-compose.yml --env-file ./env/unittests.env  up  -d --build vault
        sudo docker exec -i  vault mkdir -p /vault/data
        sudo docker exec -i  vault chown -R vault /vault/data
        echo "Ожидание доступности Vault..."
        until sudo docker exec -i vault curl -s http://127.0.0.1:8200/v1/sys/seal-status > /dev/null 2>&1; do
            sleep 1
        done
      
        echo "Vault доступен. Инициализация..."
        init_output=$( sudo docker exec -i  vault vault operator init -format=json )

        if [ $? -ne 0 ]; then
          echo "Ошибка инициализации Vault"
          exit 1
        fi

        # Извлекаем unseal-ключи (массив) и root-токен с помощью jq
        readarray -t unseal_keys < <(echo "$init_output" | jq -r '.unseal_keys_b64[]')
        root_token=$(echo "$init_output" | jq -r '.root_token')
        
        echo "VAULT_UNSEAL_KEY_1=${unseal_keys[0]}" >> $GITHUB_OUTPUT
        echo "VAULT_UNSEAL_KEY_2=${unseal_keys[1]}" >> $GITHUB_OUTPUT
        echo "VAULT_UNSEAL_KEY_3=${unseal_keys[2]}" >> $GITHUB_OUTPUT
        echo "VAULT_UNSEAL_KEY_4=${unseal_keys[3]}" >> $GITHUB_OUTPUT
        echo "VAULT_UNSEAL_KEY_5=${unseal_keys[4]}" >> $GITHUB_OUTPUT
        echo "VAULT_ROOT_TOKEN=$root_token" >> $GITHUB_OUTPUT
        
        export unseal_keys=""
        export root_token=""
        export init_output=""

    - name: Add vault secrets config to env files.
      run: |
        echo "VAULT_UNSEAL_KEY_1=${{ steps.vault_init.outputs.VAULT_UNSEAL_KEY_1 }}" >>  ./env/unittests.env
        echo "VAULT_UNSEAL_KEY_2=${{ steps.vault_init.outputs.VAULT_UNSEAL_KEY_2 }}" >>  ./env/unittests.env
        echo "VAULT_UNSEAL_KEY_3=${{ steps.vault_init.outputs.VAULT_UNSEAL_KEY_3 }}" >>  ./env/unittests.env
        echo "VAULT_UNSEAL_KEY_4=${{ steps.vault_init.outputs.VAULT_UNSEAL_KEY_4 }}" >>  ./env/unittests.env
        echo "VAULT_UNSEAL_KEY_5=${{ steps.vault_init.outputs.VAULT_UNSEAL_KEY_5 }}" >>  ./env/unittests.env
        echo "VAULT_ROOT_TOKEN=${{ steps.vault_init.outputs.VAULT_ROOT_TOKEN }}" >>  ./env/unittests.env

        cp -f ./env/unittests.env ./env/.env

    - name: Unseal vault.
      run: |  
        seal_status=$(sudo docker exec -i  vault vault status -format=json | jq -r '.sealed')
        if [[ "$seal_status" == "true" ]]; then
            echo "Vault запечатан. Начинаем процесс разблокировки..."
            sudo docker exec -i  vault vault operator unseal "${{ steps.vault_init.outputs.VAULT_UNSEAL_KEY_1 }}"
            sudo docker exec -i  vault vault operator unseal "${{ steps.vault_init.outputs.VAULT_UNSEAL_KEY_2 }}"
            sudo docker exec -i  vault vault operator unseal "${{ steps.vault_init.outputs.VAULT_UNSEAL_KEY_3 }}"
        fi
        echo "Vault уже разблокирован."
#        [[ ! -z "${VAULT_UNSEAL_KEY_1// }" ]] && echo "VAULT_UNSEAL_KEY_1 isn't empty"
#        [[ ! -z "${VAULT_UNSEAL_KEY_2// }" ]] && echo "VAULT_UNSEAL_KEY_2 isn't empty"
#        [[ ! -z "${VAULT_UNSEAL_KEY_1// }" ]] && echo "VAULT_UNSEAL_KEY_3 isn't empty"
#        [[ ! -z "${VAULT_UNSEAL_KEY_4// }" ]] && echo "VAULT_UNSEAL_KEY_4 isn't empty"
#        [[ ! -z "${VAULT_UNSEAL_KEY_5// }" ]] && echo "VAULT_UNSEAL_KEY_5 isn't empty"
#        [[ ! -z "${VAULT_ROOT_TOKEN// }" ]] && echo "VAULT_ROOT_TOKEN isn't empty"
#
#        [[  -z "${VAULT_UNSEAL_KEY_1// }" ]] && echo "VAULT_UNSEAL_KEY_1 is empty"
#        [[  -z "${VAULT_UNSEAL_KEY_2// }" ]] && echo "VAULT_UNSEAL_KEY_2 is empty"
#        [[  -z "${VAULT_UNSEAL_KEY_1// }" ]] && echo "VAULT_UNSEAL_KEY_3 is empty"
#        [[  -z "${VAULT_UNSEAL_KEY_4// }" ]] && echo "VAULT_UNSEAL_KEY_4 is empty"
#        [[  -z "${VAULT_UNSEAL_KEY_5// }" ]] && echo "VAULT_UNSEAL_KEY_5 is empty"
#        [[  -z "${VAULT_ROOT_TOKEN// }" ]] && echo "VAULT_ROOT_TOKEN is empty"


#[[ -n "$VAULT_UNSEAL_KEY_1" ]] &&
#            sudo docker exec -i  vault vault operator unseal "$VAULT_UNSEAL_KEY_1"
#            sudo docker exec -i  vault vault operator unseal "$VAULT_UNSEAL_KEY_2"
#            sudo docker exec -i  vault vault operator unseal "$VAULT_UNSEAL_KEY_3"

    - name: Imitate secrets exists into vault.
      run: |  
        sudo docker exec -i  vault vault login ${{ steps.vault_init.outputs.VAULT_ROOT_TOKEN }}
        sudo docker exec -i  vault vault secrets enable -path="${{ steps.set_env_for_docker_run.outputs.VAULT_SECRETS_PATH }}/data/${{ steps.set_env_for_docker_run.outputs.VAULT_SECRETS_NAME }}" kv

        sudo docker exec -i  vault vault kv put "${{ steps.set_env_for_docker_run.outputs.VAULT_SECRETS_PATH }}/data/${{ steps.set_env_for_docker_run.outputs.VAULT_SECRETS_NAME }}/DB_PORT" key="${{ secrets.DB_PORT }}"
        sudo docker exec -i  vault vault kv put "${{ steps.set_env_for_docker_run.outputs.VAULT_SECRETS_PATH }}/data/${{ steps.set_env_for_docker_run.outputs.VAULT_SECRETS_NAME }}/DB_LOGIN" key="${{ secrets.DB_LOGIN }}"
        sudo docker exec -i  vault vault kv put "${{ steps.set_env_for_docker_run.outputs.VAULT_SECRETS_PATH }}/data/${{ steps.set_env_for_docker_run.outputs.VAULT_SECRETS_NAME }}/DB_PASSWORD" key="${{ secrets.DB_PASSWORD }}"
        sudo docker exec -i  vault vault kv put "${{ steps.set_env_for_docker_run.outputs.VAULT_SECRETS_PATH }}/data/${{ steps.set_env_for_docker_run.outputs.VAULT_SECRETS_NAME }}/JUPYTER_TOKEN" key="${{ secrets.JUPYTER_TOKEN }}"
        sudo docker exec -i  vault vault kv put "${{ steps.set_env_for_docker_run.outputs.VAULT_SECRETS_PATH }}/data/${{ steps.set_env_for_docker_run.outputs.VAULT_SECRETS_NAME }}/AI_WEIGHTS_REPO" key="${{ secrets.AI_WEIGHTS_REPO }}"
        sudo docker exec -i  vault vault kv put "${{ steps.set_env_for_docker_run.outputs.VAULT_SECRETS_PATH }}/data/${{ steps.set_env_for_docker_run.outputs.VAULT_SECRETS_NAME }}/AI_WEIGHTS_FILENAME" key="${{ secrets.AI_WEIGHTS_FILENAME }}"
        sudo docker exec -i  vault vault kv put "${{ steps.set_env_for_docker_run.outputs.VAULT_SECRETS_PATH }}/data/${{ steps.set_env_for_docker_run.outputs.VAULT_SECRETS_NAME }}/AI_WEIGHTS_REPO_FILENAME" key="${{ secrets.AI_WEIGHTS_REPO_FILENAME }}"

        sudo docker exec -i  vault vault kv get "${{ steps.set_env_for_docker_run.outputs.VAULT_SECRETS_PATH }}/data/${{ steps.set_env_for_docker_run.outputs.VAULT_SECRETS_NAME }}/AI_WEIGHTS_REPO_FILENAME"

#        [[ ! -z "${VAULT_UNSEAL_KEY_1// }" ]] && echo "VAULT_UNSEAL_KEY_1 isn't empty"
#        [[ ! -z "${VAULT_UNSEAL_KEY_2// }" ]] && echo "VAULT_UNSEAL_KEY_2 isn't empty"
#        [[ ! -z "${VAULT_UNSEAL_KEY_1// }" ]] && echo "VAULT_UNSEAL_KEY_3 isn't empty"
#        [[ ! -z "${VAULT_UNSEAL_KEY_4// }" ]] && echo "VAULT_UNSEAL_KEY_4 isn't empty"
#        [[ ! -z "${VAULT_UNSEAL_KEY_5// }" ]] && echo "VAULT_UNSEAL_KEY_5 isn't empty"
#        [[ ! -z "${VAULT_ROOT_TOKEN// }" ]] && echo "VAULT_ROOT_TOKEN isn't empty"
#        [[  -z "${VAULT_UNSEAL_KEY_1// }" ]] && echo "VAULT_UNSEAL_KEY_1 is empty"
#        [[  -z "${VAULT_UNSEAL_KEY_2// }" ]] && echo "VAULT_UNSEAL_KEY_2 is empty"
#        [[  -z "${VAULT_UNSEAL_KEY_1// }" ]] && echo "VAULT_UNSEAL_KEY_3 is empty"
#        [[  -z "${VAULT_UNSEAL_KEY_4// }" ]] && echo "VAULT_UNSEAL_KEY_4 is empty"
#        [[  -z "${VAULT_UNSEAL_KEY_5// }" ]] && echo "VAULT_UNSEAL_KEY_5 is empty"
#        [[  -z "${VAULT_ROOT_TOKEN// }" ]] && echo "VAULT_ROOT_TOKEN is empty"


    - name: Pull images from Docker Compose
      run: |
        sudo docker-compose -f ./docker/docker-compose.yml  --env-file ./env/unittests.env  pull

    - name: Run tests
      run: |
        sudo docker-compose -f ./docker/docker-compose.yml --env-file ./env/unittests.env  up  -d --force-recreate
        sudo docker exec -i dl_labs pytest -c ./tests/pytest.ini
        TEST_EXIT_CODE=$(sudo docker inspect dl_labs --format='{{.State.ExitCode}}')
        sudo docker-compose -f ./docker/docker-compose.yml --env-file ./env/unittests.env down
        if [ "$TEST_EXIT_CODE" -ne 0 ]; then
              echo "Tests failed with exit code $TEST_EXIT_CODE"
              exit $TEST_EXIT_CODE
            else
              echo "Tests passed successfully."
        fi
    - name: Shutdown Docker Compose
      run: |
        sudo docker-compose -f ./docker/docker-compose.yml --env-file ./env/unittests.env  down

    - name: cleanup
      run: |
        - rm -rf ./*

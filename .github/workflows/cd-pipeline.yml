name: Continuous Delivery

on:
  workflow_dispatch:    # Позволяет запускать вручную
    inputs:
      deploy:
        description: 'Choose deploy environment'
        required: true
        default: 'staging'
  schedule:
    - cron: '0 0 1 * *'   # По расписанию
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed         # После завершения CI pipeline

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Set up Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose
  
    - name: Set environ variables
      run: |
        export VAULT_SECRETS_PATH="test"
        export VAULT_SECRETS_NAME="unittests"

    - name: Copy .env file
      run: |
          cp ./env/example.env ./env/.env
          echo "VAULT_SECRETS_PATH=$VAULT_SECRETS_PATH" >>  ./env/.env
          echo "VAULT_SECRETS_NAME=$VAULT_SECRETS_NAME" >>  ./env/.env

          echo "CONTAINER_PREFIX=unittests" >>  ./env/.env
          echo "DB_HOST=hbase-rest" >>  ./env/.env

          cp ./env/.env ./env/unittests.env

    - name: Pull vault image from Docker Compose
      run: |
        docker-compose -f ./docker/docker-compose.yml  --env-file ./env/unittests.env  pull vault

    - name: Get Vault tokens
      run: |
        sudo docker-compose -f ./docker/docker-compose.yml --env-file ./env/unittests.env  up  -d --build vault
        sudo docker exec -i  vault mkdir -p /vault/data
        sudo docker exec -i  vault chown -R vault /vault/data
        echo "Ожидание доступности Vault..."
        until docker exec -i vault curl -s http://127.0.0.1:8200/v1/sys/seal-status > /dev/null 2>&1; do
            sleep 1
        done
      
        echo "Vault доступен. Инициализация..."
        init_output=$( sudo docker exec -i  vault vault operator init -format=json )

        if [ $? -ne 0 ]; then
          echo "Ошибка инициализации Vault"
          exit 1
        fi

        # Извлекаем unseal-ключи (массив) и root-токен с помощью jq
        readarray -t unseal_keys < <(echo "$init_output" | jq -r '.unseal_keys_b64[]')
        root_token=$(echo "$init_output" | jq -r '.root_token')

        # Сохраняем первые три unseal-ключа в переменные окружения
        export VAULT_UNSEAL_KEY_1="${unseal_keys[0]}"
        export VAULT_UNSEAL_KEY_2="${unseal_keys[1]}"
        export VAULT_UNSEAL_KEY_3="${unseal_keys[2]}"
        export VAULT_UNSEAL_KEY_4="${unseal_keys[3]}"
        export VAULT_UNSEAL_KEY_5="${unseal_keys[4]}"
        # Сохраняем root-токен
        export VAULT_ROOT_TOKEN="$root_token"

    - name: Add vault secrets config to env files.
      run: |
        echo "VAULT_UNSEAL_KEY_1=$VAULT_UNSEAL_KEY_1" >>  ./env/unittests.env
        echo "VAULT_UNSEAL_KEY_2=$VAULT_UNSEAL_KEY_2" >>  ./env/unittests.env
        echo "VAULT_UNSEAL_KEY_3=$VAULT_UNSEAL_KEY_3" >>  ./env/unittests.env
        echo "VAULT_UNSEAL_KEY_4=$VAULT_UNSEAL_KEY_4" >>  ./env/unittests.env
        echo "VAULT_UNSEAL_KEY_5=$VAULT_UNSEAL_KEY_5" >>  ./env/unittests.env
        echo "VAULT_ROOT_TOKEN=$VAULT_ROOT_TOKEN" >>  ./env/unittests.env

        cp -f ./env/unittests.env ./env/.env

    - name: Imitate secrets exists into vault.
      run: |        
        sudo docker exec -i  vault vault login $VAULT_ROOT_TOKEN
        sudo docker exec -i  vault vault kv put $VAULT_SECRETS_PATH/$VAULT_SECRETS_NAME DB_PORT="${{ secrets.DB_PORT }}"
        sudo docker exec -i  vault vault kv put $VAULT_SECRETS_PATH/$VAULT_SECRETS_NAME DB_LOGIN="${{ secrets.DB_LOGIN }}"
        sudo docker exec -i  vault vault kv put $VAULT_SECRETS_PATH/$VAULT_SECRETS_NAME DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
        sudo docker exec -i  vault vault kv put $VAULT_SECRETS_PATH/$VAULT_SECRETS_NAME JUPYTER_TOKEN="${{ secrets.JUPYTER_TOKEN }}"
        sudo docker exec -i  vault vault kv put $VAULT_SECRETS_PATH/$VAULT_SECRETS_NAME AI_WEIGHTS_REPO="${{ secrets.AI_WEIGHTS_REPO }}"
        sudo docker exec -i  vault vault kv put $VAULT_SECRETS_PATH/$VAULT_SECRETS_NAME AI_WEIGHTS_FILENAME="${{ secrets.AI_WEIGHTS_FILENAME }}"
        sudo docker exec -i  vault vault kv put $VAULT_SECRETS_PATH/$VAULT_SECRETS_NAME AI_WEIGHTS_REPO_FILENAME="${{ secrets.AI_WEIGHTS_REPO_FILENAME }}"

    - name: Pull images from Docker Compose
      run: |
        docker-compose -f ./docker/docker-compose.yml  --env-file ./env/unittests.env  pull

    - name: Run tests
      run: |
        docker-compose -f ./docker/docker-compose.yml --env-file ./env/unittests.env  up  -d
        docker exec -it dl_labs pytest -c ./tests/pytest.ini
        TEST_EXIT_CODE=$(docker inspect dl_labs --format='{{.State.ExitCode}}')
        docker-compose -f ./docker/dev.docker-compose.yml -f ./docker/test.docker-compose.yml --env-file ./env/unittests.env down
        if [ "$TEST_EXIT_CODE" -ne 0 ]; then
              echo "Tests failed with exit code $TEST_EXIT_CODE"
              exit $TEST_EXIT_CODE
            else
              echo "Tests passed successfully."
        fi
    - name: Shutdown Docker Compose
      run: |
        docker-compose -f ./docker/docker-compose.yml --env-file ./env/unittests.env  down

    # TODO: добавить очищение
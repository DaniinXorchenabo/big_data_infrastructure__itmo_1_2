version: '3.9'

services:
  dl:
    image: daniinxorchenabo/itmo-prod-dl-labs-env:lighting-cu122-latest
    build:
      context: ..
      dockerfile: ./docker/lighting.Dockerfile
      target: backend
      args:
        REQUIREMENTS_FILE: ${BUILD_BACKEND_REQUIREMENTS_FILE:-cu_12_2.txt}

    container_name: dl_labs
    depends_on:
      - hbase-rest
      - vault
    environment:
      - BACKEND_HOST_URL=dl
      - DB_HOST=hbase-rest
      - VAULT_HOST=vault
    env_file:
      - ../env/.env
    volumes: #!override
      - type: bind
        source: ../neural/logs/prod
        target: /workspace/NN/neural/logs/prod
    command: >
      bash -c "
      fastapi run --workers ${BACKEND_APP_WORKERS_COUNT} --port ${BACKEND_PORT} --host 0.0.0.0  main.py
      "
    networks:
      - production_network
      - db_network
    ports: #!override
      - "0.0.0.0:${BACKEND_PORT}:${BACKEND_PORT}"
    healthcheck:
      test: curl --fail http://dl:${BACKEND_PORT}/healthcheck || exit 1
      interval: 10s
      timeout: 10s
      start_period: 10s
      retries: 10

  kdc:
    depends_on:
      - vault
    build: ./kdc
    container_name: kerberos-kdc
    image: daniinxorchenabo/itmo-dl-labs-kerberos-kdc:latest
    ports:
      - "88:88"
      - "749:749"
    volumes:
      - kdc-data:/var/kerberos/krb5kdc
      - ./kdc/keytabs:/etc/krb5kdc  # Монтирование каталога с keytab-файлами
      - ./hbase/conf:/etc/hbase/conf

    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - db_network
    ports:
      - "2181:2181"

  hbase:
    build: ./hbase
    image: daniinxorchenabo/itmo-dl-labs-hbase:latest
    container_name: hbase-secure
    environment:
      - HBASE_CLUSTER_DISTRIBUTED=true
      - HBASE_MANAGES_ZOOKEEPER=false
    networks:
      - db_network
    ports:
      - "16010:16010"  # веб-интерфейс HMaster
      - "16020:16020"  # порт регионсерверов (если требуется)
    volumes:
      - hbase-data:/opt/hbase/data
      - hbase-logs:/hbase/logs
#      - ./kdc/keytabs:/opt/hbase/kerberos  # монтирование каталога с keytab
#      - ./hbase/conf:/opt/hbase/conf
    depends_on:
      - zookeeper
      - vault
    # Запускаем HBase Master. Команда запускает HBase Master,
    # который при распределённом режиме использует внешний ZooKeeper.
    command: ["bash", "-c", "/hbase/bin/start-hbase.sh master && tail -f /hbase/logs/hbase--master-*.log"]
    restart: unless-stopped

  hbase-rest:
    build: ./hbase
    image: daniinxorchenabo/itmo-dl-labs-hbase:latest
    container_name: hbase-rest
    environment:
      - HBASE_CLUSTER_DISTRIBUTED=true
      - HBASE_MANAGES_ZOOKEEPER=false
    networks:
      - db_network
    ports:
      - "${DB_PORT}:${DB_PORT}"  # Порт для HBase REST сервера
    volumes:
      - hbase-data:/hbase/data
      - hbase-logs:/hbase/logs
#      - ./kdc/keytabs:/opt/hbase/kerberos  # монтирование каталога с keytab
#      - ./hbase/conf:/opt/hbase/conf

    depends_on:
      - zookeeper
      - hbase
      - vault
    # Запускаем HBase REST в foreground на порту 8080
    command: ["bash", "-c", "/hbase/bin/hbase rest start -p 8080 && tail -f /hbase/logs/hbase--rest-*.log"]
    restart: unless-stopped
    healthcheck:
      test: curl --fail http://hbase-rest:${DB_PORT}/ || exit 1
      interval: 10s
      timeout: 10s
      start_period: 10s
      retries: 10

  vault:
    image: daniinxorchenabo/itmo-dl-labs-vault:latest
    build: ./vault
    container_name: vault
    ports:
      - "8200:8200"
    environment:
      VAULT_ADDR: "http://127.0.0.1:8200"
    volumes:
      - ./vault/vault-config.hcl:/vault/config/vault-config.hcl
      - ./vault/init_vault.sh:/vault/init_vault.sh
      - vault-data:/vault/data
    cap_add:
      - IPC_LOCK
    command: "vault server -config=/vault/config/vault-config.hcl"
    networks:
      - db_network
    healthcheck:
      test: curl --fail http://vault:8200/v1/sys/seal-status || exit 1
      interval: 10s
      timeout: 10s
      start_period: 10s
      retries: 10

volumes:
  kdc-data:
    name: ${CONTAINER_PREFIX}-kdc-data
  hbase-data:
    name: ${CONTAINER_PREFIX}-hbase-data
  hbase-logs:
    name: ${CONTAINER_PREFIX}-hbase-logs
  vault-data:
    name: ${CONTAINER_PREFIX}-vault_t3

networks:
  production_network:
    driver: bridge
#    enable_ipv6: true
    internal: false
    name: ${CONTAINER_PREFIX}-production_network
  db_network:
    driver: bridge
#    enable_ipv6: true
    internal: true
    name: ${CONTAINER_PREFIX}-db_network
